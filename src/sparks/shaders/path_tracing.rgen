#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};

layout(binding = 9) readonly buffer light_source_array {
  int light_sources[]; // this will save all light sources
};

layout(binding = 10) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample();
}

HitRecord hit_record, hit_record_0;
void TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record = GetHitRecord(ray_payload, origin, direction);
}

void TraceRay_0(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  hit_record_0 = GetHitRecord(ray_payload, origin, direction);
}

vec3 calculate_brdf(vec3 n, vec3 wi, vec3 wo, float D, vec3 h, float alpha, vec3 F0) {
  // float roughness = alpha;
  // float k = pow(roughness + 1.0f, 2) / 8.0f;
  float k = (alpha * alpha) / 2.0f;
  float G_i = dot(n, wi) / (dot(n, wi) * (1.0f - k) + k);
  float G_o = dot(n, wo) / (dot(n, wo) * (1.0f - k) + k);
  vec3 fresnel = F0 + (vec3(1.0f) - F0) * pow(1.0f - dot(h, wi), 5.0f);
  float G = G_i * G_o;
  if(alpha == 0.0f) {
    return G * fresnel;
  }
  // if(dot(n, wi) < 0.0f || dot(n, wo) < 0.0f) return 0.1f;
  return (fresnel * G * D / (4.0f * dot(n, wi) * dot(n, wo)))* dot(wi, n);
}

float get_pdf_ratio(vec3 origin, vec3 wi /* should be normalized */, vec3 normal, vec3 wo, int idx) { // for MIS.
  int n_lights = int(light_sources[0]);
  if(n_lights != 0) {
    return idx == 0 ? 1.0f : 0.0f;
  }
  HitRecord hit_record_p = hit_record_0;
  RayPayload rpl = ray_payload;
  TraceRay_0(origin, wi);
  Material material = materials[hit_record_0.hit_entity_id];
  float s[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  if (material.material_type == MATERIAL_TYPE_EMISSION) {
    vec3 N = hit_record_0.normal;
    if(dot(wi, N) > 0.0f) {
      N = -N;
    }
    float S = length(hit_record_0.geometry_normal) / 2;
    // vec3 L_direct = throughput * (material.albedo_color / PI) * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * radiance_dir;
    float sampling_the_light_pdf = dot(N, -wi) // cosine
                * S / pow(length(hit_record_0.position - origin),2)
                * light_sources[0] * object_infos[hit_record_0.hit_entity_id].num_faces;
    if(sampling_the_light_pdf != 0.0f) {
      sampling_the_light_pdf = 1.0f / sampling_the_light_pdf;
    }
    s[0] = sampling_the_light_pdf;
  }
  hit_record_0 = hit_record_p;
  rpl = ray_payload;
  s[1] = dot(normal, wi) / PI;
  // return 1 - idx;
  // return 1 / 2;
  // return idx == 1 ? 0.2 : 0.8;
  return s[idx] * s[idx] / (s[0] * s[0] + s[1] * s[1] + s[2] * s[2]);
}

float D_alpha(vec3 wi, vec3 N, vec3 h, float alpha) {
  return pow(alpha, 2) / (PI * pow((pow(alpha, 2) - 1) * pow(dot(N, h), 2) + 1, 2));
}

float get_pdf_ratio_principled(vec3 origin, vec3 wi /* should be normalized */, vec3 normal, vec3 wo,  float alpha, int idx) { // for MIS.
  int n_lights = int(light_sources[0]);
  if(n_lights != 0) {
    return idx == 0 ? 1.0f : 0.0f;
  }
  HitRecord hit_record_p = hit_record_0;
  RayPayload rpl = ray_payload;
  TraceRay_0(origin, wi);
  Material material = materials[hit_record_0.hit_entity_id];
  float s[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  if (material.material_type == MATERIAL_TYPE_EMISSION) {
    vec3 N = hit_record_0.normal;
    if(dot(wi, N) > 0.0f) {
      N = -N;
    }
    float S = length(hit_record_0.geometry_normal) / 2;
    // vec3 L_direct = throughput * (material.albedo_color / PI) * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * radiance_dir;
    float sampling_the_light_pdf = dot(N, -wi) // cosine
                * S / pow(length(hit_record_0.position - origin),2)
                * light_sources[0] * object_infos[hit_record_0.hit_entity_id].num_faces;
    if(sampling_the_light_pdf != 0.0f) {
      sampling_the_light_pdf = 1.0f / sampling_the_light_pdf;
    }
    s[0] = sampling_the_light_pdf;
  }
  hit_record_0 = hit_record_p;
  rpl = ray_payload;
  vec3 h = normalize(wi + wo);
  // if(length(h - normal) < 1e-5 )
  // vec3 N = normalize(wi + wo);
  s[1] = D_alpha(wi, normal, h, alpha) * dot(normal, h) / dot(h, wi);
  if(alpha < 0.1f) {return idx == 1 ? 1.0f: 0.0f;}
  // return 1 - idx;
  // return 1 / 2;
  // return idx == 1 ? 0.2 : 0.8;
  return s[idx] * s[idx] / (s[0] * s[0] + s[1] * s[1]);
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  if (guo.sample_algo == 1) { // Cosine-weighted + Sampling the Light
    float light_sampled = 1.0f; // if = 1.0f, then we are using Sampling the Light
    #define RATE (1.0 - 1.0/guo.num_bounces)
    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    light_sampled = 1.0f;
    do {
      // vec3 L_direct = vec3(0.0f);
      TraceRay(origin, direction); 
      if (ray_payload.t == -1.0) {
        vec3 t = SampleEnvmap(direction);
        radiance += throughput * t;
        break;
      } else {
        vec3 safe_direction = direction;
        Material material = materials[hit_record.hit_entity_id];
        vec3 hit_record_normal = hit_record.normal;

        if(dot(hit_record.normal, direction) > 0.0f) {
          hit_record.normal = -hit_record.normal;
        }

        // SEARCH_TARGET::: sample the light: 
        int n_lights = int(light_sources[0]);
        if(n_lights != 0 && (material.material_type == MATERIAL_TYPE_LAMBERTIAN || material.material_type == MATERIAL_TYPE_PRINCIPLED)) {
          int r = RandomInt(n_lights) + 1;
          int face_cnt = light_sources[2 * r + 1];
          int obj = light_sources[2 * r];
          int faceid = RandomInt(face_cnt);
          // vec3 v1, v2, v3;
          ObjectInfo obj_info = object_infos[obj];
          Vertex nd0 = GetVertex(obj_info.vertex_offset + indices[obj_info.index_offset + faceid * 3 + 0]),
                 nd1 = GetVertex(obj_info.vertex_offset + indices[obj_info.index_offset + faceid * 3 + 1]),
                 nd2 = GetVertex(obj_info.vertex_offset + indices[obj_info.index_offset + faceid * 3 + 2]);
          vec3 d = vec3(RandomFloat(), RandomFloat(), RandomFloat());
          while(d.x + d.y + d.z == 0.0f) {
            vec3 d = vec3(RandomFloat(), RandomFloat(), RandomFloat());
          }
          d /= d.x + d.y + d.z;
          d /= d.x + d.y + d.z;
          vec3 pt = d.x * nd0.position + d.y * nd1.position + d.z * nd2.position;
          vec3 N = cross(nd1.position - nd0.position, nd2.position - nd0.position);
          float S = length(N) / 2;
          N = normalize(N);
          vec3 Origin = hit_record.position;
          vec3 wi = normalize(pt - hit_record.position);
          if(dot(wi, N) > 0) {
            N = -N;
          }
          TraceRay_0(Origin, wi);
          if(ray_payload.t < 0.0f) {
            
          } else {
            Material light_m = materials[hit_record_0.hit_entity_id];
            if(length(hit_record_0.position - pt)  < 1e-3 && light_m.material_type == MATERIAL_TYPE_EMISSION) {
              vec3 radiance_dir = light_m.emission * light_m.emission_strength
                          * max(0.0f, dot(hit_record.normal, wi)) // cosine
                          * dot(N, -wi) // cosine
                          * S / pow(length(hit_record_0.position - Origin),2)
                          * n_lights * face_cnt;
              vec3 L_direct = throughput * (material.albedo_color / PI) * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * radiance_dir;
              if(material.material_type == MATERIAL_TYPE_PRINCIPLED) {
                if(dot(hit_record.normal, wi) > 0) {
                  float DD = D_alpha(wi, hit_record.normal, normalize(wi - direction), material.alpha);
                  vec3 wo = -direction;
                  vec3 h = normalize(wi + wo);
                  if(material.alpha == 0.0f) h = hit_record.normal;
                  L_direct = throughput * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * radiance_dir * 
                  calculate_brdf(hit_record.normal, wi, wo, DD, h, material.alpha, material.albedo_color) / dot(hit_record.normal, wi);
                } else
                  L_direct = vec3(0.0f);
              }
              float sampling_the_light_pdf = dot(N, -wi) // cosine
                          * S / pow(length(hit_record_0.position - Origin),2)
                          * n_lights * face_cnt;
              if(sampling_the_light_pdf != 0.0f) {
                sampling_the_light_pdf = 1.0f / sampling_the_light_pdf;
              }
              // if(sampling_the_light_pdf != 0.0f)
              if(material.material_type == MATERIAL_TYPE_LAMBERTIAN)
                radiance += L_direct * get_pdf_ratio(Origin, wi, hit_record.normal, -direction, 0);
              else 
                radiance += L_direct * get_pdf_ratio_principled(Origin, wi, hit_record.normal, -direction, material.alpha, 0);
            }
          }
        }
        if (material.material_type != MATERIAL_TYPE_EMISSION) {
          vec3 emission = material.emission * vec3(texture(texture_samplers[material.emission_texture_id],hit_record.tex_coord));
          if(emission != vec3(0.0f)) {
            radiance += throughput * emission * material.emission_strength;
            break;
          }
        }
        if (material.material_type == MATERIAL_TYPE_EMISSION) {
          // if(!light_sampled) 
          // radiance += throughput * material.emission * material.emission_strength;
          radiance += light_sampled * throughput * material.emission * material.emission_strength;
          break;
        } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
          hit_record.normal = normalize(hit_record.normal);
          // float phi = RandomFloat() * PI;
          // float rho = RandomFloat() * 2 * PI;
            // // std::cerr << RRR(rd) << std::endl;
          vec3 wi = RandomOnSphere();
          wi = normalize(wi);
          if(dot(hit_record.normal, wi) < 0.0f) {
            wi = -wi;
          }
          vec3 dirx = normalize(wi - dot(wi, hit_record.normal) * hit_record.normal);
          vec3 diry = cross(hit_record.normal, dirx);
          float rr = RandomFloat();
          float rr2 = RandomFloat() * 2 * PI;
          float cosine = sqrt(1.0f - rr);
          float sine = sqrt(rr);
          wi = sine * cos(rr2) * dirx + sine * sin(rr2) * diry + cosine * hit_record.normal;
          
          // we get true wi until now. (Cosine-weighted)
          float pdf = /* 2.0f * sine * cosine */1.0f * cosine / (PI);
          // float pdf = 1.0 / (2.0 * PI);
          // this is calculate shading
          throughput *= material.albedo_color * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord));
          // this is calculate shading
          // throughput *= dot(wi, hit_record.normal) * (material.albedo_color / PI) * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * (2.0f * PI);
          origin = hit_record.position;
          direction = wi;

          light_sampled = get_pdf_ratio(origin, direction, hit_record.normal, -safe_direction, 1);
        } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
          hit_record.normal = normalize(hit_record.normal);
            // // std::cerr << RRR(rd) << std::endl;
          vec3 wi = direction - 2.0f * dot(direction, hit_record.normal) * hit_record.normal;
          // if(dot(hit_record.normal, wi) < 0.0f) {
          //   wi = -wi;
          // }
          // this is calculate shading
          throughput *= /* material.albedo_color *  */vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord));
          origin = hit_record.position;
          direction = wi;

          // light_sampled = get_pdf_ratio(origin, direction, hit_record.normal, -direction, 1);
        } else if (material.material_type == MATERIAL_TYPE_TRANSMISSIVE) {
          // hit_record.normal = hit_record_normal;
          vec3 median = -dot(direction, hit_record_normal) * hit_record_normal;
          vec3 proj_x = normalize(direction + median);
          vec3 proj_y = hit_record_normal; 
          // theta: 初始角度，phi: 穿过后角度
          float cos_theta = dot(hit_record_normal, direction);
          float sin_theta = sqrt(1-cos_theta*cos_theta);
          float sin_phi, cos_phi;
          float eta_i = 1.0;
          float eta_o = material.iot;
          float eta = 1.0 / material.iot;
          if (cos_theta < 0) {
            proj_y = -proj_y;
            cos_theta = -cos_theta;
          } else{
            eta = 1.0 / eta;
            eta_i = material.iot;
            eta_o = 1.0;
          }
          float f0 = pow((eta_i - eta_o) / (eta_i + eta_o), 2);
          float fresnel = f0 + (1.0f - f0) * pow(1.0 - abs(cos_theta), 5);
          if(RandomFloat() > fresnel) {
            sin_phi = eta * sin_theta;
            cos_phi = sqrt(1-sin_phi*sin_phi);
            origin = hit_record.position;
            direction = cos_phi * proj_y + sin_phi * proj_x;
          } else {
            vec3 wi = direction - 2.0f * dot(direction, hit_record.normal) * hit_record.normal;
            // this is calculate shading
            origin = hit_record.position;
            direction = wi;
          }
        } else if (material.material_type == MATERIAL_TYPE_PRINCIPLED){
          // GGX sampling:
          float epsilon = RandomFloat();
          float cosine = sqrt((1.0f - epsilon) / (epsilon * (pow(material.alpha, 2) - 1.0f) + 1));
          if(material.alpha == 0.0f) cosine = 1.0f;
          float sine = sqrt(1.0f - cosine * cosine);
          float rr = RandomFloat() * 2 * PI;
          vec3 wi = RandomOnSphere();
          hit_record.normal = normalize(hit_record.normal);
          if(dot(hit_record.normal, wi) < 0.0f) {
            wi = -wi;
          }
          vec3 dirx = normalize(wi - dot(wi, hit_record.normal) * hit_record.normal);
          vec3 diry = cross(hit_record.normal, dirx);
          vec3 h = normalize(dirx * sine * cos(rr) + diry * sine * sin(rr) + hit_record.normal * cosine);
          if(material.alpha == 0.0f) {
            h = hit_record.normal;
          }
          vec3 wo = -direction;
          wi = direction - 2.0f * dot(direction, h) * h;
          if(dot(wi, hit_record.normal) <= 0.0f) {
            break;
          } 
          throughput *= /* material.albedo_color *  */vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord));
          float D = 4.0f * dot(wo, h);
          // if(length(h - hit_record.normal) > 1e-4)
          throughput *= 1.0f * calculate_brdf(hit_record.normal, wi, wo, D, h, material.alpha, material.albedo_color);
          origin = hit_record.position;
          direction = wi;
          // h is sampled
          light_sampled = get_pdf_ratio_principled(origin, direction, hit_record.normal, -safe_direction, material.alpha, 1);
        } else {
          throughput *= material.albedo_color *
                        vec3(texture(texture_samplers[material.albedo_texture_id],
                                    hit_record.tex_coord));
          origin = hit_record.position;
          direction = guo.envmap_light_direction;
          radiance += throughput * guo.envmap_minor_color;
          throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
          TraceRay(origin, direction);
          if (ray_payload.t < 0.0f) {
            radiance += throughput * guo.envmap_major_color;
          }
          break;
        }
        if(material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
          // light_sampled = get_pdf_ratio(origin, direction, hit_record.normal, -safe_direction, 1);        
        } else if (material.material_type == MATERIAL_TYPE_PRINCIPLED) {

        } else {
          light_sampled = 1.0f;
        }
      }
      throughput /= RATE; // if didn't break, we have (Rate) prob to survive.
    } while(RandomFloat() < RATE);
    return radiance;
  }
  // vec3 radiance = vec3(0.0);
  // vec3 throughput = vec3(1.0);
  // for (int b = 0; b < guo.num_bounces; b++) {
  //   TraceRay(origin, direction); 
  //   if (ray_payload.t == -1.0) {
  //     radiance += throughput * SampleEnvmap(direction);
  //     break;
  //   } else {
  //     Material material = materials[hit_record.hit_entity_id];
  //     if (material.material_type == MATERIAL_TYPE_EMISSION) {
  //       radiance += throughput * material.emission * material.emission_strength;
  //       break;
  //     } else if (material.material_type == MATERIAL_TYPE_LAMBERTIAN) {
  //       if(dot(hit_record.normal, direction) > 0.0f) {
  //         hit_record.normal = -hit_record.normal;
  //       }
  //       hit_record.normal = normalize(hit_record.normal);
  //       float phi = RandomFloat() * PI;
  //       float rho = RandomFloat() * 2 * PI;
  //         // // std::cerr << RRR(rd) << std::endl;
  //       vec3 wi = vec3 (
  //         sin(rho) * cos(phi),
  //         cos(rho) * cos(phi),
  //         sin(phi)
  //       );
  //       wi = normalize(wi);
  //       if(dot(hit_record.normal, wi) < 0.0f) {
  //         wi = -wi;
  //       }
  //       // this is calculate shading
  //       throughput *= dot(wi, hit_record.normal) * (material.albedo_color / PI) * vec3(texture(texture_samplers[material.albedo_texture_id],hit_record.tex_coord)) * (2.0f * PI);
  //       origin = hit_record.position;
  //       direction = wi;
  //     } else if (material.material_type == MATERIAL_TYPE_SPECULAR) {
  //       if(dot(hit_record.normal, direction) > 0.0f) {
  //         hit_record.normal = -hit_record.normal;
  //       }
  //       hit_record.normal = normalize(hit_record.normal);
  //       float phi = RandomFloat() * PI;
  //       float rho = RandomFloat() * 2.0f * PI;
  //         // // std::cerr << RRR(rd) << std::endl;
  //       vec3 wi = direction - 2.0f * hit_record.normal;
  //       if(dot(hit_record.normal, wi) < 0.0f) {
  //         wi = -wi;
  //       }
  //       // this is calculate shading
  //       origin = hit_record.position;
  //       direction = wi;
  //     } 
  //     else {
  //       throughput *= material.albedo_color *
  //                     vec3(texture(texture_samplers[material.albedo_texture_id],
  //                                  hit_record.tex_coord));
  //       origin = hit_record.position;
  //       direction = guo.envmap_light_direction;
  //       radiance += throughput * guo.envmap_minor_color;
  //       throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
  //       TraceRay(origin, direction);
  //       if (ray_payload.t < 0.0f) {
  //         radiance += throughput * guo.envmap_major_color;
  //       }
  //       break;
  //     }
  //   }
  // }
  return vec3(0.0f);
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;
  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);
  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    
    // vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    // vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    // vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);
    vec2 pixelPoint = vec2(gl_LaunchIDEXT.x + RandomFloat(), gl_LaunchIDEXT.y + RandomFloat()); 
    vec2 inUV = pixelPoint / vec2(gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);
    vec2 d = inUV * 2.0 - 1.0;
    vec3 o_ = vec3(RandomInCircle() * guo.aperture, 0); // origin
    vec3 t_ = vec3(screen_to_camera * vec4(d.x, d.y, 1, 1)); // target
    vec3 f_ = normalize(t_) * guo.focal_length; // focal
    vec3 d_ = normalize(f_ - o_); // direct
    vec4 origin = camera_to_world * vec4(o_, 1);
    vec4 direction = camera_to_world * vec4(d_, 0);
    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
